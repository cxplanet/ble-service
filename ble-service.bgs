dim custom_adv_data(30)
dim custom_sr_data(10)

dim connected
dim encrypted

event system_boot(major, minor, patch, build, ll_version, protocol, hw)	
	
	# set all GPIO pins to input/high (pull), except P1_0 and P1_1 to output HIGH (no internal pull-ups)
    # P1_0/1 will leak current if not externally pulled or set as outputs
    call hardware_io_port_config_direction(0, $0)
    call hardware_io_port_write(0, $ff, $ff)
    call hardware_io_port_config_direction(1, $3)
    call hardware_io_port_write(1, $ff, $ff)
    call hardware_io_port_config_direction(2, $0)
    call hardware_io_port_write(2, $ff, $ff)
	
	# set advertisement interval to 2.0 second, all three channels
    call gap_set_adv_parameters(800, 800, 3)
	
	# Set advertisement interval to 100 to 500ms. Use all advertisement channels
	# call gap_set_adv_parameters(20, 100, 7)
	
	#set to advertising mode
	call gap_set_mode(gap_user_data, gap_undirected_connectable)
	
	# Flags
	custom_adv_data( 0:1) = $02
	custom_adv_data( 1:1) = $01
	custom_adv_data( 2:1) = $06
	
	# Manufacturer data
	custom_adv_data( 3:1) = $1a
	custom_adv_data( 4:1) = $ff
	
	# Preamble - Apple Company Identifier - data type, 0x02 - data length, 0x15 = 21
	custom_adv_data( 5:1) = $4c
	custom_adv_data( 6:1) = $00
	custom_adv_data( 7:1) = $02
	custom_adv_data( 8:1) = $15
	
	# Custom UUID
	# E2 C5 6D B5-DF FB-48 D2-B0 60-D0 F5 A7 10 96 E0 
	# One of the UUIDs used in the AirLocate Sample of Apple.
	#
	# The UUID (16 bytes long)
	custom_adv_data( 9:1) = $E2 # 0
	custom_adv_data(10:1) = $C5 # 1
	custom_adv_data(11:1) = $6D # 2
	custom_adv_data(12:1) = $B5 # 3
	custom_adv_data(13:1) = $DF # 4
	custom_adv_data(14:1) = $FB # 5
	custom_adv_data(15:1) = $48 # 6
	custom_adv_data(16:1) = $D2 # 7
	custom_adv_data(17:1) = $B0 # 8
	custom_adv_data(18:1) = $60 # 9
	custom_adv_data(19:1) = $D0 # 10
	custom_adv_data(20:1) = $F5 # 11
	custom_adv_data(21:1) = $A7 # 12
	custom_adv_data(22:1) = $10 # 13
	custom_adv_data(23:1) = $96 # 14
	custom_adv_data(24:1) = $E0 # 16
	# ---

	# Major
	custom_adv_data(25:1) = $00
	custom_adv_data(26:1) = $01
	
	# Minor
	custom_adv_data(27:1) = $00
	custom_adv_data(28:1) = $01

	# Measured power at 1 meter (specified in 2's complement, so 0xC6 is -58)
	custom_adv_data(29:1) = $c6

	# Set advertisement data
	call gap_set_adv_data(0, 30, custom_adv_data(0:30))
	
		# Local Name 
	custom_sr_data( 0:1) = $0B # Length of this Data
	custom_sr_data( 1:1) = $09 # AD Type = Complete Local Name
	custom_sr_data( 2:1) = $69 # i
	custom_sr_data( 3:1) = $42 # B
	custom_sr_data( 4:1) = $65 # e
	custom_sr_data( 5:1) = $61 # a
	custom_sr_data( 6:1) = $63 # c
	custom_sr_data( 7:1) = $6F # o
	custom_sr_data( 8:1) = $6E # n			
	custom_sr_data( 9:1) = $31 # 1			
	custom_sr_data(10:1) = $31 # 1			
	custom_sr_data(11:1) = $33 # 3	

	# Set Scan Record data
	call gap_set_adv_data(1, 12, custom_sr_data(0:12))
	
end

# catch new or updated connection
event connection_status(connection, flags, address, address_type, conn_interval, timeout, latency, bonding)
    # check for "new connection established" event
    if (flags & $05) = $05 then
        # update status vars
        connected = 1
    end if
    
    # check for "encrypted" status (e.g. connected + paired)
    if (flags & $02) = $02 then
        # update status vars
        encrypted = 1
    end if
end

# catch disconnection
event connection_disconnected(handle, result)
    # if disconnected, return to advertisement mode
    call gap_set_mode(gap_general_discoverable, gap_undirected_connectable)

    # update status vars
    connected = 0
    encrypted = 0
end